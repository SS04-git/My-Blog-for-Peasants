{
  "hash": "169b444b7efd1cf636eb339741fd122c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quantities\"\nauthor: \"Sara S\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#|label: setup\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\nlibrary(skimr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(crosstable)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n```\n\n\n:::\n:::\n\n\n\n## Organizing the dataset diamonds\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(diamonds)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |diamonds |\n|Number of rows           |53940    |\n|Number of columns        |10       |\n|_______________________  |         |\n|Column type frequency:   |         |\n|factor                   |3        |\n|numeric                  |7        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                                    |\n|:-------------|---------:|-------------:|:-------|--------:|:---------------------------------------------|\n|cut           |         0|             1|TRUE    |        5|Ide: 21551, Pre: 13791, Ver: 12082, Goo: 4906 |\n|color         |         0|             1|TRUE    |        7|G: 11292, E: 9797, F: 9542, H: 8304           |\n|clarity       |         0|             1|TRUE    |        8|SI1: 13065, VS2: 12258, SI2: 9194, VS1: 8171  |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|    mean|      sd|    p0|    p25|     p50|     p75|     p100|hist  |\n|:-------------|---------:|-------------:|-------:|-------:|-----:|------:|-------:|-------:|--------:|:-----|\n|carat         |         0|             1|    0.80|    0.47|   0.2|   0.40|    0.70|    1.04|     5.01|▇▂▁▁▁ |\n|depth         |         0|             1|   61.75|    1.43|  43.0|  61.00|   61.80|   62.50|    79.00|▁▁▇▁▁ |\n|table         |         0|             1|   57.46|    2.23|  43.0|  56.00|   57.00|   59.00|    95.00|▁▇▁▁▁ |\n|price         |         0|             1| 3932.80| 3989.44| 326.0| 950.00| 2401.00| 5324.25| 18823.00|▇▂▁▁▁ |\n|x             |         0|             1|    5.73|    1.12|   0.0|   4.71|    5.70|    6.54|    10.74|▁▁▇▃▁ |\n|y             |         0|             1|    5.73|    1.14|   0.0|   4.72|    5.71|    6.54|    58.90|▇▁▁▁▁ |\n|z             |         0|             1|    3.54|    0.71|   0.0|   2.91|    3.53|    4.04|    31.80|▇▁▁▁▁ |\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n```\n\n\n:::\n:::\n\n\n\n## Creating graphs according to price\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~price, data = diamonds) %>%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\nThe histogram shows the distribution of diamond prices. It reveals that most diamonds are on the lower end of the price spectrum. There is a significant right-skewed distribution, indicating that high-priced diamonds are less frequent.\n\n## Creating graphs according to price and bins\n\nNotes: Bins in a histogram are the intervals used to group data. They help organize data points into ranges, making it easier to see how many values fall within each range. Each bin represents a specific range of values, and the height of the bar for each bin shows the number of data points in that range.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~price,\n  data = diamonds,\n  bins = 1000\n) %>%\n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nIncreasing the number of bins provides a more detailed view of price distribution.\n\n## Creating graphs according to carat and bins\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~carat) %>%\n  gf_labs(\n    title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nMost diamonds cluster around smaller carat sizes, with the majority falling below 1 carat. The distribution is heavily skewed, with very few diamonds exceeding 2 carats.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~carat,\n    bins = 100\n  ) %>%\n  gf_labs(\n    title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nThis histogram, with more bins, adds detail to the carat distribution.\n\n## Creating graphs according to price and cut\n\nNotes: 'alpha= some number' refers to the transparency level of the bars. An alpha value between 0 and 1 determines how see-through the bars are.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~price, fill = ~cut, data = diamonds) %>%\n  gf_labs(title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThe distribution across all cuts remains right-skewed, though the distribution changes slightly based on the cut quality.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %>%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## Creating graphs according to price facetted by cut\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %>%\n  gf_facet_wrap(~cut) %>%\n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nEach panel shows that even the most expensive diamonds tend to belong to the \"Ideal\" or \"Premium\" categories.\n\n## Creating graphs according to price facetted by cut with a different y-axis for each graph\n\nNotes: 'free_y' or 'free_x' means that the y-axis or x-axis can adjust independently for each panel in a plot, allowing for better visualization of data patterns without being constrained by a fixed scale.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %>%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %>%\n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nUsing a free y-scale allows each panel to adjust its y-axis, which helps emphasize patterns in less common categories like Fair cut diamonds. This approach better highlights the density of price distributions across different cuts.\n\n## Creating graphs according to price and clarity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~price, fill = ~clarity, data = diamonds) %>%\n  gf_labs(title = \"Plot 4A: Diamond Prices\", caption = \"ggformula\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nThe distribution of prices by clarity shows that certain clarity levels like SI1 and VS2 dominate the lower price ranges, while IF (internally flawless) and higher clarity levels are generally priced higher.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~price, fill = ~clarity, data = diamonds, color = \"black\", alpha = 0.7) %>%\n  gf_labs(title = \"Plot 4B: Prices by Clarity\", caption = \"ggformula\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nBy facetting the data by clarity, it's easier to see the price distribution within each clarity level.\n\n## Creating graphs according to price facetted by clarity\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  gf_histogram(~price, fill = ~clarity, data = diamonds, color=\"black\", alpha =0.7) %>%\ngf_facet_wrap(~clarity) %>%\n  gf_labs(\n    title = \"Plot 4C: Prices by Filled and Facetted by Clarity\",\n    caption = \"ggformula\"\n  ) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nEach clarity group reveals different price distributions, indicating how clarity affects the overall value of diamonds. Clarity grades like IF might show higher price concentrations, while lower clarity grades may display wider ranges or lower price peaks.\n\n## Creating graphs according to price facetted by clarity with a different y-axis for each graph\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  gf_histogram(~price, fill = ~clarity, data = diamonds, color =\"black\", alpha=0.7) %>%gf_facet_wrap(~clarity, scales = \"free_y\", nrow = 3) %>%\n  gf_labs(\n    title = \"Plot 4D: Prices Filled and Facetted by Clarity\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  )) %>% \n    gf_theme(theme(\n    axis.text.y =\n      element_text(\n        hjust = 0.3\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nSimilar to Plot 4C, but with free y-scales for each clarity category. This setup provides a clearer view of price distributions, especially in groups with very different price ranges. The varying scales show that some clarity categories, like VS1 and VS2, can have significant price variation compared to others.\n\n## Creating graphs according to price and colour\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~color) %>%\n  gf_labs(\n    title = \"Plot 5A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nThe visualization shows how color influences diamond prices, with some colors likely commanding higher prices. Color categories such as D (colorless) generally yield higher price ranges than J (faint yellow).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~color, color = \"black\", alpha = 0.5) %>%\n  gf_labs(\n    title = \"Plot 5B: Prices by Colour\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n## Creating graphs according to price facetted by colour\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~color, color = \"black\", alpha = 0.5) %>%\ngf_facet_wrap(~color) %>%\n  gf_labs(\n    title = \"Plot 5C: Prices by Filled and Facetted by Colour\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nEach facet represents a color category, providing a clear comparison of how each color affects pricing. Some colors may show very distinct distributions, with the colors like D and E exhibiting higher concentration in the upper price ranges.\n\n## Creating graphs according to price facetted by colour with a different y-axis for each graph\n\n```         \n```\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~color, color = \"black\", alpha = 0.5) %>%\ngf_facet_wrap(~color) %>%\n  gf_labs(\n    title = \"Plot 5D: Prices Filled and Facetted by Colour\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45,\n        hjust = 1\n      )\n  )) %>% \n    gf_theme(theme(\n    axis.text.y =\n      element_text(\n        hjust = 0.3\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n## Datasets: Race(details of various races) & Rank (the participants of the races)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nrank_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n## Organizing the data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(race_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,207\nColumns: 13\n$ race_year_id   <dbl> 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          <chr> \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           <chr> \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           <chr> \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        <chr> \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           <date> 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     <time> 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  <chr> \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       <dbl> 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain <dbl> 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss <dbl> -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   <dbl> 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   <dbl> 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(rank_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 137,803\nColumns: 8\n$ race_year_id    <dbl> 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          <chr> \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            <chr> \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             <dbl> 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          <chr> \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     <chr> \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds <dbl> 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n```\n\n\n:::\n:::\n\n\n\n```         \n```\n\n## **Summary Statistics for Distance in Race Data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df %>%\n  favstats(~distance, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n```\n\n\n:::\n:::\n\n\n\n## **Summary Statistics for Number of Participants in Race Data**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df %>%\n  favstats(~participants, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n min Q1 median  Q3  max     mean       sd    n missing\n   0  0     21 150 2900 120.4872 281.8337 1207       0\n```\n\n\n:::\n:::\n\n\n\n## Summary Statistics for Race Time by Gender\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_df %>%\n  drop_na() %>%\n  favstats(time_in_seconds ~ gender, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n```\n\n\n:::\n:::\n\n\n\n## Cross-table of Race Time and Age by Gender\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %>%\n  crosstable::as_flextable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-a2947234{table-layout:auto;}.cl-a2869650{font-family:'Arial';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a2869664{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-a28bb586{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-a28bb59a{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-a28be308{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a28be312{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a28be31c{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a28be326{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a28be327{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a28be330{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a28be331{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-a28be33a{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-a2947234'><thead><tr style=\"overflow-wrap:break-word;\"><th  rowspan=\"2\"class=\"cl-a28be308\"><p class=\"cl-a28bb586\"><span class=\"cl-a2869650\">label</span></p></th><th  rowspan=\"2\"class=\"cl-a28be308\"><p class=\"cl-a28bb586\"><span class=\"cl-a2869650\">variable</span></p></th><th  colspan=\"3\"class=\"cl-a28be312\"><p class=\"cl-a28bb586\"><span class=\"cl-a2869650\">gender</span></p></th></tr><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-a28be31c\"><p class=\"cl-a28bb586\"><span class=\"cl-a2869650\">M</span></p></th><th class=\"cl-a28be31c\"><p class=\"cl-a28bb586\"><span class=\"cl-a2869650\">W</span></p></th><th class=\"cl-a28be31c\"><p class=\"cl-a28bb586\"><span class=\"cl-a2869650\">NA</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td  rowspan=\"4\"class=\"cl-a28be326\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">time_in_seconds</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">Min / Max</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">3600.0 / 2.9e+05</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">9191.0 / 3.0e+05</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">8131.0 / 2.2e+05</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">Med [IQR]</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">1.2e+05 [9.7e+04;1.5e+05]</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">1.1e+05 [9.7e+04;1.3e+05]</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">1.2e+05 [9.9e+04;1.5e+05]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">Mean (std)</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">1.2e+05 (3.8e+04)</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">1.2e+05 (3.5e+04)</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">1.2e+05 (4.4e+04)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-a28be326\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">N (NA)</span></p></td><td class=\"cl-a28be326\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">101643 (15073)</span></p></td><td class=\"cl-a28be326\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">18341 (2716)</span></p></td><td class=\"cl-a28be326\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">28 (2)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td  rowspan=\"4\"class=\"cl-a28be330\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">age</span></p></td><td class=\"cl-a28be331\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">Min / Max</span></p></td><td class=\"cl-a28be331\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">0 / 133.0</span></p></td><td class=\"cl-a28be331\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">0 / 81.0</span></p></td><td class=\"cl-a28be331\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">29.0 / 59.0</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">Med [IQR]</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">47.0 [40.0;53.0]</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">45.0 [39.0;52.0]</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">40.5 [36.0;50.5]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">Mean (std)</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">46.4 (10.2)</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">45.3 (9.7)</span></p></td><td class=\"cl-a28be327\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">41.7 (9.0)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-a28be33a\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">N (NA)</span></p></td><td class=\"cl-a28be33a\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">116716 (0)</span></p></td><td class=\"cl-a28be33a\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">21057 (0)</span></p></td><td class=\"cl-a28be33a\"><p class=\"cl-a28bb59a\"><span class=\"cl-a2869664\">30 (0)</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n## Number of races held by various countries\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df %>%\n  count(country) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 2\n   country            n\n   <chr>          <int>\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n\n## Number of races held by different nationalities\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_df %>%\n  count(nationality) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 133 × 2\n   nationality     n\n   <chr>       <int>\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n```\n\n\n:::\n:::\n\n\n\n## Countries have the maximum number of winners\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_df %>%\n  filter(rank %in% c(1, 2, 3)) %>%\n  count(nationality) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 69 × 2\n   nationality     n\n   <chr>       <int>\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n```\n\n\n:::\n:::\n\n\n\n## Countries have had the most top-3 finishes in the **longest** distance race\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongest_races <- race_df %>%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         <dbl> <chr>     <chr> <chr> <chr>   <date>     <time>     <chr>        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance <dbl>, elevation_gain <dbl>,\n#   elevation_loss <dbl>, aid_stations <dbl>, participants <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nlongest_races %>%\n  left_join(., rank_df, by = \"race_year_id\") %>% # total participants in longest 4 races\n  filter(rank %in% c(1:10)) %>% # Top 10 ranks\n  count(nationality) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 2\n  nationality     n\n  <chr>       <int>\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n```\n\n\n:::\n:::\n\n\n\n## Distribution of time across both races and ranks\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_df %>%\n  gf_histogram(~time_in_seconds, bins = 75) %>%\n  gf_labs(title = \"Histogram of Race Times\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n## Race distances\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df %>%\n  gf_histogram(~distance, bins = 50) %>%\n  gf_labs(title = \"Histogram of Race Distances\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n## Enteries where distance is zero\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df %>%\n  filter(distance == 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 74 × 13\n   race_year_id event    race  city  country date       start_time participation\n          <dbl> <chr>    <chr> <chr> <chr>   <date>     <time>     <chr>        \n 1        64771 The Old… 100m… Hanm… New Ze… 2021-05-14 10:00      solo         \n 2        71220 Run Lov… 100M  <NA>  United… 2021-02-26 00:00      solo         \n 3        67160 IDAHO M… 100 … <NA>  United… 2020-09-12 00:00      solo         \n 4        67713 Pine cr… 100M… Well… PA, Un… 2020-09-12 00:00      solo         \n 5        51777 Chiemga… 100 … Berg… Germany 2020-07-31 13:00      Solo         \n 6        66413 Palisad… Moos… Irwin United… 2020-07-17 05:00      solo         \n 7        62593 Run Lov… 100M  <NA>  United… 2020-02-28 00:00      solo         \n 8        50097 The Gre… The … Hanm… New Ze… 2020-01-17 07:00      solo         \n 9        65861 Loup Ga… 100M  Vill… LA, Un… 2019-12-14 00:00      solo         \n10        59415 RIO DEL… 100 … <NA>  United… 2019-11-07 00:00      solo         \n# ℹ 64 more rows\n# ℹ 5 more variables: distance <dbl>, elevation_gain <dbl>,\n#   elevation_loss <dbl>, aid_stations <dbl>, participants <dbl>\n```\n\n\n:::\n:::\n\n\n\n## D**istribution of finishing times for race distance around 150**\n\n### Count for starting times of race\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_times <- race_df %>%\n  count(start_time) %>%\n  arrange(desc(n))\nrace_times\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 39 × 2\n   start_time     n\n   <time>     <int>\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n```\n\n\n:::\n:::\n\n\n\n### Convert start_time into a factor with levels: early_morning(0200:0600), late_morning(0600:1000), midday(1000:1400), afternoon(1400: 1800), evening(1800:2200), and night(2200:0200)\n\nNotes:\n\n'left_join' combines two datasets by matching rows based on a common key, preserving all records from the left dataset.\n\n'vars' is used in functions to specify variable names for grouping or facetting in data visualizations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_start_factor <- race_df %>%\n  filter(distance == 0) %>% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time > hms(\"02:00:00\") &\n          start_time <= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time > hms(\"06:00:01\") &\n          start_time <= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time > hms(\"10:00:01\") &\n          start_time <= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time > hms(\"14:00:01\") &\n          start_time <= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time > hms(\"18:00:01\") &\n          start_time <= hms(\"22:00:00\") ~ \"evening\",\n        start_time > hms(\"22:00:01\") &\n          start_time <= hms(\"23:59:59\") ~ \"night\",\n        start_time >= hms(\"00:00:00\") &\n          start_time <= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %>%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %>%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%>%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n```\n\n\n:::\n\n```{.r .cell-code}\n##\n# Join with rank_df\nrace_start_factor %>%\n  left_join(rank_df, by = \"race_year_id\") %>%\n  drop_na(time_in_seconds) %>%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %>%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %>%\n  gf_labs(title = \"Race Times by Start-Time\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n## Population dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop <- read_delim(\"../../data/populations.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 16400 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country_code, country_name\ndbl (2): year, value\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\npop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 16,400 × 4\n   country_code country_name  year value\n   <chr>        <chr>        <dbl> <dbl>\n 1 ABW          Aruba         1960 54608\n 2 ABW          Aruba         1961 55811\n 3 ABW          Aruba         1962 56682\n 4 ABW          Aruba         1963 57475\n 5 ABW          Aruba         1964 58178\n 6 ABW          Aruba         1965 58782\n 7 ABW          Aruba         1966 59291\n 8 ABW          Aruba         1967 59522\n 9 ABW          Aruba         1968 59471\n10 ABW          Aruba         1969 59330\n# ℹ 16,390 more rows\n```\n\n\n:::\n:::\n\n\n\n## Organizing data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncategorical variables:  \n          name     class levels     n missing\n1 country_code character    265 16400       0\n2 country_name character    265 16400       0\n                                   distribution\n1 ABW (0.4%), AFE (0.4%), AFG (0.4%) ...       \n2 Afghanistan (0.4%) ...                       \n\nquantitative variables:  \n   name   class  min       Q1  median       Q3        max         mean\n1  year numeric 1960   1975.0    1991     2006       2021 1.990529e+03\n2 value numeric 2646 986302.5 6731400 46024452 7888408686 2.140804e+08\n            sd     n missing\n1 1.789551e+01 16400       0\n2 7.040554e+08 16400       0\n```\n\n\n:::\n:::\n\n\n\n## Plotting for value\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~value, data = pop, title = \"Long Tailed Histogram\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngf_density(~value, data = pop, title = \"Long Tailed Density\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-2.png){width=672}\n:::\n:::\n\n\n\n## Plotting using log\n\n#### Notes:\n\nThe log10(value) part applies a logarithmic transformation to the variable value using base 10. This transformation helps to compress the scale of the data, which is particularly useful when dealing with data that spans several orders of magnitude or has a right-skewed distribution.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~ log10(value), data = pop, title = \"Histogram with Log transformed x-variable\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n\n```{.r .cell-code}\ngf_density(~ log10(value), data = pop, title = \"Density with Log transformed x-variable\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-40-2.png){width=672}\n:::\n:::\n\n\n\n## Dataset: Faithful\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfaithful\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    eruptions waiting\n1       3.600      79\n2       1.800      54\n3       3.333      74\n4       2.283      62\n5       4.533      85\n6       2.883      55\n7       4.700      88\n8       3.600      85\n9       1.950      51\n10      4.350      85\n11      1.833      54\n12      3.917      84\n13      4.200      78\n14      1.750      47\n15      4.700      83\n16      2.167      52\n17      1.750      62\n18      4.800      84\n19      1.600      52\n20      4.250      79\n21      1.800      51\n22      1.750      47\n23      3.450      78\n24      3.067      69\n25      4.533      74\n26      3.600      83\n27      1.967      55\n28      4.083      76\n29      3.850      78\n30      4.433      79\n31      4.300      73\n32      4.467      77\n33      3.367      66\n34      4.033      80\n35      3.833      74\n36      2.017      52\n37      1.867      48\n38      4.833      80\n39      1.833      59\n40      4.783      90\n41      4.350      80\n42      1.883      58\n43      4.567      84\n44      1.750      58\n45      4.533      73\n46      3.317      83\n47      3.833      64\n48      2.100      53\n49      4.633      82\n50      2.000      59\n51      4.800      75\n52      4.716      90\n53      1.833      54\n54      4.833      80\n55      1.733      54\n56      4.883      83\n57      3.717      71\n58      1.667      64\n59      4.567      77\n60      4.317      81\n61      2.233      59\n62      4.500      84\n63      1.750      48\n64      4.800      82\n65      1.817      60\n66      4.400      92\n67      4.167      78\n68      4.700      78\n69      2.067      65\n70      4.700      73\n71      4.033      82\n72      1.967      56\n73      4.500      79\n74      4.000      71\n75      1.983      62\n76      5.067      76\n77      2.017      60\n78      4.567      78\n79      3.883      76\n80      3.600      83\n81      4.133      75\n82      4.333      82\n83      4.100      70\n84      2.633      65\n85      4.067      73\n86      4.933      88\n87      3.950      76\n88      4.517      80\n89      2.167      48\n90      4.000      86\n91      2.200      60\n92      4.333      90\n93      1.867      50\n94      4.817      78\n95      1.833      63\n96      4.300      72\n97      4.667      84\n98      3.750      75\n99      1.867      51\n100     4.900      82\n101     2.483      62\n102     4.367      88\n103     2.100      49\n104     4.500      83\n105     4.050      81\n106     1.867      47\n107     4.700      84\n108     1.783      52\n109     4.850      86\n110     3.683      81\n111     4.733      75\n112     2.300      59\n113     4.900      89\n114     4.417      79\n115     1.700      59\n116     4.633      81\n117     2.317      50\n118     4.600      85\n119     1.817      59\n120     4.417      87\n121     2.617      53\n122     4.067      69\n123     4.250      77\n124     1.967      56\n125     4.600      88\n126     3.767      81\n127     1.917      45\n128     4.500      82\n129     2.267      55\n130     4.650      90\n131     1.867      45\n132     4.167      83\n133     2.800      56\n134     4.333      89\n135     1.833      46\n136     4.383      82\n137     1.883      51\n138     4.933      86\n139     2.033      53\n140     3.733      79\n141     4.233      81\n142     2.233      60\n143     4.533      82\n144     4.817      77\n145     4.333      76\n146     1.983      59\n147     4.633      80\n148     2.017      49\n149     5.100      96\n150     1.800      53\n151     5.033      77\n152     4.000      77\n153     2.400      65\n154     4.600      81\n155     3.567      71\n156     4.000      70\n157     4.500      81\n158     4.083      93\n159     1.800      53\n160     3.967      89\n161     2.200      45\n162     4.150      86\n163     2.000      58\n164     3.833      78\n165     3.500      66\n166     4.583      76\n167     2.367      63\n168     5.000      88\n169     1.933      52\n170     4.617      93\n171     1.917      49\n172     2.083      57\n173     4.583      77\n174     3.333      68\n175     4.167      81\n176     4.333      81\n177     4.500      73\n178     2.417      50\n179     4.000      85\n180     4.167      74\n181     1.883      55\n182     4.583      77\n183     4.250      83\n184     3.767      83\n185     2.033      51\n186     4.433      78\n187     4.083      84\n188     1.833      46\n189     4.417      83\n190     2.183      55\n191     4.800      81\n192     1.833      57\n193     4.800      76\n194     4.100      84\n195     3.966      77\n196     4.233      81\n197     3.500      87\n198     4.366      77\n199     2.250      51\n200     4.667      78\n201     2.100      60\n202     4.350      82\n203     4.133      91\n204     1.867      53\n205     4.600      78\n206     1.783      46\n207     4.367      77\n208     3.850      84\n209     1.933      49\n210     4.500      83\n211     2.383      71\n212     4.700      80\n213     1.867      49\n214     3.833      75\n215     3.417      64\n216     4.233      76\n217     2.400      53\n218     4.800      94\n219     2.000      55\n220     4.150      76\n221     1.867      50\n222     4.267      82\n223     1.750      54\n224     4.483      75\n225     4.000      78\n226     4.117      79\n227     4.083      78\n228     4.267      78\n229     3.917      70\n230     4.550      79\n231     4.083      70\n232     2.417      54\n233     4.183      86\n234     2.217      50\n235     4.450      90\n236     1.883      54\n237     1.850      54\n238     4.283      77\n239     3.950      79\n240     2.333      64\n241     4.150      75\n242     2.350      47\n243     4.933      86\n244     2.900      63\n245     4.583      85\n246     3.833      82\n247     2.083      57\n248     4.367      82\n249     2.133      67\n250     4.350      74\n251     2.200      54\n252     4.450      83\n253     3.567      73\n254     4.500      73\n255     4.150      88\n256     3.817      80\n257     3.917      71\n258     4.450      83\n259     2.000      56\n260     4.283      79\n261     4.767      78\n262     4.533      84\n263     1.850      58\n264     4.250      83\n265     1.983      43\n266     2.250      60\n267     4.750      75\n268     4.117      81\n269     2.150      46\n270     4.417      90\n271     1.817      46\n272     4.467      74\n```\n\n\n:::\n:::\n\n\n\n## Organizing the dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(faithful)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 272\nColumns: 2\n$ eruptions <dbl> 3.600, 1.800, 3.333, 2.283, 4.533, 2.883, 4.700, 3.600, 1.95…\n$ waiting   <dbl> 79, 54, 74, 62, 85, 55, 88, 85, 51, 85, 54, 84, 78, 47, 83, …\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(faithful)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nquantitative variables:  \n       name   class  min       Q1 median       Q3  max      mean        sd   n\n1 eruptions numeric  1.6  2.16275      4  4.45425  5.1  3.487783  1.141371 272\n2   waiting numeric 43.0 58.00000     76 82.00000 96.0 70.897059 13.594974 272\n  missing\n1       0\n2       0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(faithful)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |         |\n|:------------------------|:--------|\n|Name                     |faithful |\n|Number of rows           |272      |\n|Number of columns        |2        |\n|_______________________  |         |\n|Column type frequency:   |         |\n|numeric                  |2        |\n|________________________ |         |\n|Group variables          |None     |\n\n\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|  mean|    sd|   p0|   p25| p50|   p75| p100|hist  |\n|:-------------|---------:|-------------:|-----:|-----:|----:|-----:|---:|-----:|----:|:-----|\n|eruptions     |         0|             1|  3.49|  1.14|  1.6|  2.16|   4|  4.45|  5.1|▇▂▂▇▇ |\n|waiting       |         0|             1| 70.90| 13.59| 43.0| 58.00|  76| 82.00| 96.0|▃▃▂▇▂ |\n\n\n:::\n:::\n\n\n\n## Eruption Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~eruptions, data = faithful) %>%\n  gf_labs(\n    title = \"Plot 1: Eruptions\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\nThis provides a basic view of the distribution of eruption times, which shows that the eruption times are bimodal—there are two peaks, indicating two common durations for eruptions: shorter and longer ones.\n\n## Eruption data with bins\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~eruptions, data = faithful, bins = 150) %>%\n  gf_labs(\n    title = \"Plot 2: Eruptions\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n\nIn this plot, the number of bins has been increased to 150. This results in a finer granularity, showing more of the detailed variations within the eruption times.\n\n## Waiting Data with bins\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~waiting, data = faithful, bins = 50) %>%\n  gf_labs(\n    title = \"Plot 3: Eruptions\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\n\nWith 50 bins, it shows a unimodal distribution, with most waiting times clustering around the middle (around 70-80 minutes).\n\n## Factorization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neruption_duration_factor <- faithful %>%\n  mutate(\n    eruption_category = case_when(\n      eruptions <= 3 ~ \"short\",\n      eruptions > 3 ~ \"long\",\n      .default = \"unknown\"\n    )\n  )\n```\n:::\n\n\n\n## Eruptions durations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~eruptions, fill = ~eruption_category, data = eruption_duration_factor, bins = 150) %>%\n  gf_labs(\n    title = \"Plot 4: Eruption Duration Categories\",\n    caption = \"ggformula\"\n  )%>% \n    gf_refine(scale_fill_manual(values = c(\"darkgreen\", \"orange\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\n\nThe eruption durations are now divided into two categories: \"short\" and \"long\" eruptions, using a threshold of 3 minutes. The histogram shows that short eruptions are more frequent, while longer eruptions are less common but still significant.\n\n## Waiting times vary for short vs. long eruptions\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~waiting, fill = ~eruption_category, data = eruption_duration_factor, bins = 100) %>%\n  gf_labs(\n    title = \"Plot 5A: Waiting Times for Eruption Duration Categories\",\n    caption = \"ggformula\"\n  )%>% \n    gf_refine(scale_fill_manual(values = c(\"darkgreen\", \"orange\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~waiting, fill = ~eruption_category, data = eruption_duration_factor, bins = 50) %>%\n  gf_facet_wrap(~~eruption_category, scales = \"free_y\") %>%\n  gf_labs(\n    title = \"Plot 5B: Waiting Times for Eruption Duration Categories\",\n    caption = \"ggformula\"\n  )%>% \n    gf_refine(scale_fill_manual(values = c(\"darkgreen\", \"orange\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n\nThese histograms explore how waiting times vary depending on whether the eruption was categorized as short or long. In both plots, waiting times for long eruptions tend to be longer, with waiting times clustering higher for long eruptions. The faceted plot (5B) separates the data into distinct subplots for short and long eruptions\n\n## Number of eruptions in each category of duration\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\neruption_counts <- eruption_duration_factor %>%\n  group_by(eruption_category) %>%\n  summarize(count = n())\n\neruption_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  eruption_category count\n  <chr>             <int>\n1 long                175\n2 short                97\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neruption_duration_extra <- faithful %>%\n  mutate(\n    eruption_more = case_when(\n      eruptions > 1 & eruptions <= 2.0 ~ \"very_short\",\n      eruptions > 2 & eruptions <= 3.0 ~ \"short\",\n      eruptions > 3 & eruptions <= 4.0 ~ \"medium\",\n      eruptions > 4 ~ \"long\",\n      .default = \"unknown\"\n    )\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~waiting, fill = ~eruption_more, data = eruption_duration_extra, bins = 100) %>%\n  gf_labs(\n    title = \"Plot 6A: Waiting Times for Eruption Duration Categories\",\n    caption = \"ggformula\"\n  )%>% \n    gf_refine(scale_fill_manual(values = c(\"darkgreen\",\"brown\", \"orange\",\"yellow\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-54-1.png){width=672}\n:::\n:::\n\n\n\nEruptions are grouped into \"very short,\" \"short,\" \"medium,\" and \"long.\" The histogram displays waiting times for each category. The longer eruptions have longer waiting times. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~waiting, fill = ~eruption_more, data = eruption_duration_extra, bins = 50, color = \"black\") %>%\n  gf_facet_wrap(~~eruption_more, scales = \"free_y\") %>%\n  gf_labs(\n    title = \"Plot 6A: Waiting Times for Eruption Duration Categories\",\n    caption = \"ggformula\"\n  )%>% \n    gf_refine(scale_fill_manual(values = c(\"darkgreen\",\"brown\", \"orange\",\"yellow\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n\nThis plot, divided by eruption categories of very short, short, medium, and long, shows how waiting times vary in each group. Each subplot offers detailed insights for direct comparison. Waiting times for shorter eruptions are more consistent, while longer eruptions show a wider range of waiting times.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}