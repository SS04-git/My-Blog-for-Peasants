{
  "hash": "7e5791bdefbe77f44b6d28ee61e4551f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \" Inference for a Single Mean\"\nauthor: \"Sara S\"\n---\n\n\n\n\n## Installing Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\nlibrary(infer)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(broom) # Clean test results in tibble form\nlibrary(resampledata) # Datasets from Chihara and Hesterberg's book\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'resampledata'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(openintro) # More datasets\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: airports\nLoading required package: cherryblossom\nLoading required package: usdata\n\nAttaching package: 'openintro'\n\nThe following object is masked from 'package:mosaic':\n\n    dotPlot\n\nThe following objects are masked from 'package:lattice':\n\n    ethanol, lsegments\n```\n\n\n:::\n:::\n\n\n\n\n## Dataset: Toy Data - Reading\n\nNotes:\n\n-   **set.seed** : This function is used to ensure that the random number generation is reproducible. By setting a seed value (in this case, 40), every time this code is run, it will produce the same random numbers. This is essential for replicability in research and analysis.\n\n-   **rnorm(n, mean, sd)**: generates random numbers following a normal distribution.\n\n-   For this case study **rnorm(50, mean = 2, sd = 2)**\n\n    n = 50 This specifies that 50 random numbers should be generated.\n\n    mean = 2 This sets the mean of the distribution to 2.\n\n    sd = 2 This sets the standard deviation of the distribution to 2\n\n    The result is a vector y containing 50 random values drawn from a normal distribution with the specified mean and standard deviation. This data can be used for statistical analyses like t-tests.\n\n-   **mydata \\<- tibble(y = y)**: This line converts the vector y into a tibble (a modern version of a data frame provided by the tibble package in R).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(40)  # for replication\n# Data as individual vectors ( for t.tests etc)\ny <- rnorm(50, mean = 2, sd = 2)\n\n# And as tibble too\nmydata <- tibble(y = y)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 1\n        y\n    <dbl>\n 1  2.96 \n 2  2.99 \n 3  0.281\n 4  0.342\n 5  1.36 \n 6 -0.608\n 7 -0.843\n 8  5.49 \n 9  1.42 \n10 -0.618\n# ℹ 40 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## **Inspecting and Charting Data**\n\nNotes:\n\n-   **dist = \"dnorm\"**: This function fits a normal distribution to the data.\n\n    There are others named \"dexp\" for Exponential distribution and \"dpois\" for Poisson distribution\n\n-   **gf_fitdistr**: It fits a normal distribution to the data and overlays it on the density plot, allowing for a direct visual comparison.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydata %>%\n    gf_density(~y) %>%\n    gf_fitdistr(dist = \"dnorm\") %>%\n    gf_labs(title = \"Densities of Original Data Variables\", subtitle = \"Compared with Normal Density\")\n```\n\n::: {.cell-output-display}\n![](index2_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 <- mosaic::t_test(\n          y, # Name of variable\n          mu = 0, # belief of population mean\n          alternative = \"two.sided\") %>% # Check both sides\n  \n  broom::tidy() # Make results presentable, and plottable!!\nt1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  estimate statistic     p.value parameter conf.low conf.high method alternative\n     <dbl>     <dbl>       <dbl>     <dbl>    <dbl>     <dbl> <chr>  <chr>      \n1     2.05      6.79     1.43e-8        49     1.44      2.65 One S… two.sided  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nt2 <- wilcox.test(y, # variable name\n                  mu = 0, # belief\n                  alternative = \"two.sided\",\n                  conf.int = TRUE,\n                  conf.level = 0.95) %>% \n  broom::tidy()\nt2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  estimate statistic    p.value conf.low conf.high method            alternative\n     <dbl>     <dbl>      <dbl>    <dbl>     <dbl> <chr>             <chr>      \n1     2.05      1144 0.00000104     1.38      2.72 Wilcoxon signed … two.sided  \n```\n\n\n:::\n:::\n\n\n\n\n## Exam Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"exam_grades\")\nexam_grades\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 233 × 6\n   semester sex   exam1 exam2 exam3 course_grade\n   <chr>    <chr> <dbl> <dbl> <dbl>        <dbl>\n 1 2000-1   Man    84.5  69.5  86.5         76.3\n 2 2000-1   Man    80    74    67           75.4\n 3 2000-1   Man    56    70    71.5         67.1\n 4 2000-1   Man    64    61    67.5         63.5\n 5 2000-1   Man    90.5  72.5  75           72.4\n 6 2000-1   Man    74    78.5  84.5         71.4\n 7 2000-1   Man    60.5  44    58           56.1\n 8 2000-1   Man    89    82    88           78.0\n 9 2000-1   Woman  87.5  86.5  95           82.9\n10 2000-1   Man    91    98    88           89.1\n# ℹ 223 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_grades %>%\n    gf_density(~course_grade) %>%\n    gf_fitdistr(dist = \"dnorm\") %>%\n    gf_labs(title = \"Density of Course Grade\", subtitle = \"Compared with Normal Density\")\n```\n\n::: {.cell-output-display}\n![](index2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstats::shapiro.test(x = exam_grades$course_grade) %>%\n    broom::tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  statistic p.value method                     \n      <dbl>   <dbl> <chr>                      \n1     0.994   0.471 Shapiro-Wilk normality test\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(nortest)\n# Especially when we have >= 5000 observations\nnortest::ad.test(x = exam_grades$course_grade) %>%\n    broom::tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  statistic p.value method                         \n      <dbl>   <dbl> <chr>                          \n1     0.331   0.512 Anderson-Darling normality test\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nt4 <- mosaic::t_test(\n          exam_grades$course_grade, # Name of variable\n          mu = 80, # belief\n          alternative = \"two.sided\") %>% # Check both sides\nbroom::tidy()\nt4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 8\n  estimate statistic  p.value parameter conf.low conf.high method    alternative\n     <dbl>     <dbl>    <dbl>     <dbl>    <dbl>     <dbl> <chr>     <chr>      \n1     72.2     -12.1 2.19e-26       232     71.0      73.5 One Samp… two.sided  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nt5 <- wilcox.test(\n          exam_grades$course_grade, # Name of variable\n          mu = 90, # belief\n          alternative = \"two.sided\",\n          conf.int = TRUE,\n          conf.level = 0.95) %>% # Check both sides\n  \n  broom::tidy() # Make results presentable, and plottable!!\nt5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 7\n  estimate statistic  p.value conf.low conf.high method              alternative\n     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> <chr>               <chr>      \n1     72.4        75 1.49e-39     71.2      73.7 Wilcoxon signed ra… two.sided  \n```\n\n\n:::\n:::\n",
    "supporting": [
      "index2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}