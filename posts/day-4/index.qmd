---
title: "Quantities"
author: "Sara S"
---

```{r}
#|label: setup
library(tidyverse)
library(mosaic)
library(ggformula)
library(skimr)
library(crosstable)
```

## Organizing the dataset diamonds

```{r}
glimpse(diamonds)
```

```{r}
skim(diamonds)
```

```{r}
inspect(diamonds)
```

## Creating graphs according to price

```{r}
gf_histogram(~price, data = diamonds) %>%
  gf_labs(
    title = "Plot 1A: Diamond Prices",
    caption = "ggformula"
  )
```

## Creating graphs according to price and bins

```{r}
gf_histogram(~price,
  data = diamonds,
  bins = 1000
) %>%
  gf_labs(
    title = "Plot 1B: Diamond Prices",
    caption = "ggformula"
  )
```

## Creating graphs according to carat and bins

```{r}
diamonds %>%
  gf_histogram(~carat) %>%
  gf_labs(
    title = "Plot 2A: Carats of Diamonds",
    caption = "ggformula"
  )
```

```{r}
diamonds %>%
  gf_histogram(~carat,
    bins = 100
  ) %>%
  gf_labs(
    title = "Plot 2B: Carats of Diamonds",
    caption = "ggformula"
  )
```

## Creating graphs according to price and cut

```{r}
gf_histogram(~price, fill = ~cut, data = diamonds) %>%
  gf_labs(title = "Plot 3A: Diamond Prices", caption = "ggformula")
```

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~cut, color = "black", alpha = 0.3) %>%
  gf_labs(
    title = "Plot 3B: Prices by Cut",
    caption = "ggformula"
  )
```

## Creating graphs according to price facetted by cut

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~cut, color = "black", alpha = 0.3) %>%
  gf_facet_wrap(~cut) %>%
  gf_labs(
    title = "Plot 3C: Prices by Filled and Facetted by Cut",
    caption = "ggformula"
  ) %>%
  gf_theme(theme(
    axis.text.x = element_text(
      angle = 45,
      hjust = 1
    )
  ))
```

## Creating graphs according to price facetted by cut with a different y-axis for each graph

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~cut, color = "black", alpha = 0.3) %>%
  gf_facet_wrap(~cut, scales = "free_y", nrow = 2) %>%
  gf_labs(
    title = "Plot 3D: Prices Filled and Facetted by Cut",
    subtitle = "Free y-scale",
    caption = "ggformula"
  ) %>%
  gf_theme(theme(
    axis.text.x =
      element_text(
        angle = 45,
        hjust = 1
      )
  ))
```

## Creating graphs according to price and clarity

```{r}
gf_histogram(~price, fill = ~clarity, data = diamonds) %>%
  gf_labs(title = "Plot 3A: Diamond Prices", caption = "ggformula")
```

```{r}
gf_histogram(~price, fill = ~clarity, data = diamonds, color = "black", alpha = 0.7) %>%
  gf_labs(title = "Plot 3B: Prices by Clarity", caption = "ggformula")
```

## Creating graphs according to price facetted by clarity

```{r}
  gf_histogram(~price, fill = ~clarity, data = diamonds, color="black", alpha =0.7) %>%
gf_facet_wrap(~clarity) %>%
  gf_labs(
    title = "Plot 3C: Prices by Filled and Facetted by Clarity",
    caption = "ggformula"
  ) 
```

## Creating graphs according to price facetted by clarity with a different y-axis for each graph

```{r}
  gf_histogram(~price, fill = ~clarity, data = diamonds, color ="black", alpha=0.7) %>%gf_facet_wrap(~clarity, scales = "free_y", nrow = 3) %>%
  gf_labs(
    title = "Plot 3D: Prices Filled and Facetted by Clarity",
    subtitle = "Free y-scale",
    caption = "ggformula"
  ) %>%
  gf_theme(theme(
    axis.text.x =
      element_text(
        angle = 45,
        hjust = 1
      )
  )) %>% 
    gf_theme(theme(
    axis.text.y =
      element_text(
        hjust = 0.3
      )
  ))
```

## Creating graphs according to price and colour

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~color) %>%
  gf_labs(
    title = "Plot 3A: Diamond Prices",
    caption = "ggformula"
  )
```

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~color, color = "black", alpha = 0.5) %>%
  gf_labs(
    title = "Plot 3B: Prices by Colour",
    caption = "ggformula"
  )
```

## Creating graphs according to price facetted by colour

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~color, color = "black", alpha = 0.5) %>%
gf_facet_wrap(~color) %>%
  gf_labs(
    title = "Plot 3C: Prices by Filled and Facetted by Colour",
    caption = "ggformula"
  )
```

## Creating graphs according to price facetted by colour with a different y-axis for each graph

```         
```

```{r}
diamonds %>%
  gf_histogram(~price, fill = ~color, color = "black", alpha = 0.5) %>%
gf_facet_wrap(~color) %>%
  gf_labs(
    title = "Plot 3D: Prices Filled and Facetted by Colour",
    subtitle = "Free y-scale",
    caption = "ggformula"
  ) %>%
  gf_theme(theme(
    axis.text.x =
      element_text(
        angle = 45,
        hjust = 1
      )
  )) %>% 
    gf_theme(theme(
    axis.text.y =
      element_text(
        hjust = 0.3
      )
  ))
```

## Looking at two datasets - one for the details of various races and another named rank for the participants of the races

```{r}
race_df <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv")
rank_df <- read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv")
```

## Organizing the data

```{r}
glimpse(race_df)
```

```{r}
glimpse(rank_df)
```

```         
```

## **Summary Statistics for Distance in Race Data**

```{r}
race_df %>%
  favstats(~distance, data = .)
```

## **Summary Statistics for Number of Participants in Race Data**

```{r}
race_df %>%
  favstats(~participants, data = .)
```

## Summary Statistics for Race Time by Gender

```{r}
rank_df %>%
  drop_na() %>%
  favstats(time_in_seconds ~ gender, data = .)
```

## Cross-table of Race Time and Age by Gender

```{r}
crosstable(time_in_seconds + age ~ gender, data = rank_df) %>%
  crosstable::as_flextable()
```

## Number of races held by various countries

```{r}
race_df %>%
  count(country) %>%
  arrange(desc(n))
```

## Number of races held by different nationalities

```{r}
rank_df %>%
  count(nationality) %>%
  arrange(desc(n))
```

## Countries have the maximum number of winners

```{r}
rank_df %>%
  filter(rank %in% c(1, 2, 3)) %>%
  count(nationality) %>%
  arrange(desc(n))
```

## Countries have had the most top-3 finishes in the **longest** distance race

```{r}
longest_races <- race_df %>%
  slice_max(n = 5, order_by = distance) # Longest distance races
longest_races
longest_races %>%
  left_join(., rank_df, by = "race_year_id") %>% # total participants in longest 4 races
  filter(rank %in% c(1:10)) %>% # Top 10 ranks
  count(nationality) %>%
  arrange(desc(n))
```

## Distribution of time across both races and ranks

```{r}
rank_df %>%
  gf_histogram(~time_in_seconds, bins = 75) %>%
  gf_labs(title = "Histogram of Race Times")
```

## Race distances

```{r}
race_df %>%
  gf_histogram(~distance, bins = 50) %>%
  gf_labs(title = "Histogram of Race Distances")
```

## Enteries where distance is zero

```{r}
race_df %>%
  filter(distance == 0)
```

## D**istribution of finishing times for race distance around 150**

### Count for starting times of race

```{r}
race_times <- race_df %>%
  count(start_time) %>%
  arrange(desc(n))
race_times
```

### Convert start_time into a factor with levels: early_morning(0200:0600), late_morning(0600:1000), midday(1000:1400), afternoon(1400: 1800), evening(1800:2200), and night(2200:0200)

```{r}
race_start_factor <- race_df %>%
  filter(distance == 0) %>% # Races that actually took place
  mutate(
    start_day_time =
      case_when(
        start_time > hms("02:00:00") &
          start_time <= hms("06:00:00") ~ "early_morning",
        start_time > hms("06:00:01") &
          start_time <= hms("10:00:00") ~ "late_morning",
        start_time > hms("10:00:01") &
          start_time <= hms("14:00:00") ~ "mid_day",
        start_time > hms("14:00:01") &
          start_time <= hms("18:00:00") ~ "afternoon",
        start_time > hms("18:00:01") &
          start_time <= hms("22:00:00") ~ "evening",
        start_time > hms("22:00:01") &
          start_time <= hms("23:59:59") ~ "night",
        start_time >= hms("00:00:00") &
          start_time <= hms("02:00:00") ~ "postmidnight",
        .default = "other"
      )
  ) %>%
  mutate(
    start_day_time =
      as_factor(start_day_time) %>%
        fct_collapse(
          .f = .,
          night = c("night", "postmidnight")
        )
  )
##
# Join with rank_df
race_start_factor %>%
  left_join(rank_df, by = "race_year_id") %>%
  drop_na(time_in_seconds) %>%
  gf_histogram(
    ~time_in_seconds,
    bins = 75,
    fill = ~start_day_time,
    color = ~start_day_time,
    alpha = 0.5
  ) %>%
  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = "free_y") %>%
  gf_labs(title = "Race Times by Start-Time")
```

## Population dataset

```{r}
pop <- read_delim("../../data/populations.csv")
pop
```

## Organizing data

```{r}
inspect(pop)
```

## Plotting for value

```{r}
gf_histogram(~value, data = pop, title = "Long Tailed Histogram")
gf_density(~value, data = pop, title = "Long Tailed Density")
```

## Plotting using log

#### Notes:

The log10(value) part applies a logarithmic transformation to the variable value using base 10. This transformation helps to compress the scale of the data, which is particularly useful when dealing with data that spans several orders of magnitude or has a right-skewed distribution.

```{r}
gf_histogram(~ log10(value), data = pop, title = "Histogram with Log transformed x-variable")
gf_density(~ log10(value), data = pop, title = "Density with Log transformed x-variable")
```
